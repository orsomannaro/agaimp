import logging
import wx

from wx.lib.newevent import NewEvent

from gui.agaimp_gui import FrmSrvMsg

from libs.wx_utils import get_wx_icon


wxLogEvent, EVT_WX_LOG_EVENT = wx.lib.newevent.NewEvent()


class SystrayApp(wx.TaskBarIcon):
    """
    App sulla barra delle notifiche.
    """

    def __init__(self, icon, tooltip, menu, frame=None):
        wx.TaskBarIcon.__init__(self)
        self.menu = menu
        self.set_icon(icon, tooltip)
        self.frame = wx.Frame(None)  # serve su OSX altrimenti MainLoop termina
        # event handlers
        self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.OnLeftClick)

    def CreatePopupMenu(self):
        """
        Al click-destro crea il menu in base al contenuto di self.menu.
        E' quindi possibile aggiungere dinamicamente metodi e voci del menu.
        """
        menu = wx.Menu()
        for label, func in reversed(self.menu):
            item = wx.MenuItem(menu, -1, label)
            menu.Bind(wx.EVT_MENU, func, id=item.GetId())
            menu.AppendItem(item)
        return menu

    def OnClose(self, event):
        self.close()

    def OnLeftClick(self, event):
        pass

    def close(self):
        self.frame.Destroy()
        wx.CallAfter(self.Destroy)

    def set_icon(self, icon_file, icon_tooltip):
        """ Imposta icona e tooltip.
        """
        try:
            icon = get_wx_icon(icon_file)
            self.SetIcon(icon, icon_tooltip)
        except:
            raise



class wxLogHandler(logging.Handler):
    """ A logs handler class which sends log strings to a wx object
    """

    def __init__(self, wxDest=None):
        """
        @param wxDest: destination object to post the event to
        @type wxDest: wx.Window
        """
        logging.Handler.__init__(self)

        self.wxDest = wxDest
        self.level = logging.DEBUG

    def emit(self, record):
        """ Scatena evento EVT_WX_LOG_EVENT
        """
        try:
            msg = self.format(record)
            evt = wxLogEvent(message=msg, levelname=record.levelname)
            wx.PostEvent(self.wxDest, evt)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)


class aGaiMpMessagesForm(FrmSrvMsg):
    """ Subclass of FrmSrvMsg, which is generated by wxFormBuilder.
    """

    def __init__(self, parent):
        FrmSrvMsg.__init__(self, parent)

        # bind del wx.TextCtrl con EVT_WX_LOG_EVENT
        self.txt_messages.Bind(EVT_WX_LOG_EVENT, self.OnLogEvent)

    def OnClose(self, event):
        self.Hide()

    def OnReset(self, event):
        pass

    def OnLogEvent(self, event):
        """ Add event.message to text window
        """
        if self.IsShown():
            msg = event.message.strip('\r')+'\n'
            self.txt_messages.AppendText(msg)
            #wx.CallAfter(self.txt_messages.AppendText, msg)
            event.Skip()
